{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>RunMD is a command-line tool designed to extract and execute code blocks from Markdown files. It's particularly useful for managing and running code snippets embedded in documentation or notes.</p> <p>\u26a0 RunMD is intended for use with scripting languages only (e.g., Shell, Python, Ruby, JavaScript). It does not support compiled languages (e.g., C, C++, Java) as it cannot handle compilation and execution steps.</p> <p>\u26a0 RunMD is different from interactive notebooks like Jupyter or Zepplin. Each code block is independent and executed separately.</p> <ul> <li> <p> Set up in minute</p> <p>Install <code>runmd</code> with <code>pip</code> and get up and running in minute</p> <p> Getting started</p> </li> <li> <p> Only Markdown</p> <p>Gather scripts and documentation in one Markdown file</p> <p> See examples</p> </li> <li> <p> Open Source</p> <p>RunMD is licensed under the MIT license and is available on GitHub</p> <p> License</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Run code blocks: Execute code blocks directly from your Markdown files with a simple command.</li> <li>View code blocks: List and display code blocks, helping you manage and organize your scripts.</li> <li>Tag filtering: Run or display blocks based on tags for organized and targeted execution.</li> <li>Command history: Keep track of your executed commands and even re-run them at will.</li> </ul>"},{"location":"#why-runmd","title":"Why <code>runmd</code>?","text":"<p>Whether you're documenting your code, preparing interactive tutorials, or keeping a technical journal, <code>runmd</code> gives you the power to:</p> <ul> <li> Stay organized: Keep all your scripts and examples in one Markdown file without the hassle of jumping between files.</li> <li> Increase productivity: No more copy-pasting code. Just define and run code blocks within the same document.</li> <li> Maintain consistency: Run code in different environments while ensuring outputs and behavior are documented right next to the source.</li> </ul>"},{"location":"guide/getting_started/","title":"Getting started","text":"<p><code>runmd</code> is built for ease of use with a simple, intuitive CLI. Get started with a few simple commands:</p>"},{"location":"guide/getting_started/#installation-from-pip","title":"Installation from pip","text":"<pre><code>pip install runmd\n</code></pre>"},{"location":"guide/getting_started/#install-from-github-release","title":"Install from GitHub release","text":"<pre><code>pip install git+https://github.com/PageotD/runmd@&lt;version&gt;\n</code></pre>"},{"location":"guide/getting_started/#installation-from-source","title":"Installation from source","text":"<p>To build from source you must install <code>build</code> and <code>wheel</code> packages. <pre><code>pip install build whell\n</code></pre></p> <p>Clone the git repository <pre><code>git clone git@github.com:PageotD/runmd.git\n</code></pre></p> <p>Build and install <pre><code>python -m build &amp;&amp; pip install dist/runmd*.whl\n</code></pre></p>"},{"location":"guide/examples/docker-example/","title":"Interact with Docker","text":"<p>This example demonstrates how to build, run, and manage a simple Docker container using an Apache HTTP server. The steps cover Dockerfile creation, image building, container running, and stopping.</p>"},{"location":"guide/examples/docker-example/#step-1-create-a-dockerfile","title":"Step 1: Create a Dockerfile","text":"<p>Start by creating a file named <code>Dockerfile.apache</code> with the following content. This file instructs Docker to use the official Apache HTTP server image and copy the contents of the <code>public-html</code> directory to the Apache document root.</p> <pre><code>FROM httpd:2.4\nCOPY ./public-html/ /usr/local/apache2/htdocs/\n</code></pre>"},{"location":"guide/examples/docker-example/#step-2-build-and-run-docker-image","title":"Step 2: Build and Run Docker Image","text":"<p>In this section, you will build the Docker image and run a container based on it.</p>"},{"location":"guide/examples/docker-example/#build-the-docker-image","title":"Build the Docker Image","text":"<p>The following command builds the Docker image using the <code>Dockerfile.apache</code> file. The image will be tagged as <code>my-apache2</code>.</p> <pre><code>    ```bash {name=docker-build-apache,tag=docker-example}\n    docker build -t my-apache2 -f Dockerfile.apache .\n    ```\n</code></pre>"},{"location":"guide/examples/docker-example/#run-the-docker-container","title":"Run the Docker Container","text":"<p>Once the image is built, you can run it as a container. The following command starts a container in detached mode, names it <code>my-running-app</code>, and exposes port <code>8080</code> on your local machine to port <code>80</code> on the container (the default Apache port).</p> <pre><code>    ```bash {name=docker-run-apache,tag=docker-example}\n    docker run -dit --name my-running-app -p 8080:80 my-apache2\n    ```\n</code></pre> <p>You can now access the Apache server by navigating to <code>http://localhost:8080</code> in your web browser.</p>"},{"location":"guide/examples/docker-example/#list-docker-containers","title":"List Docker Containers","text":"<p>To check the running containers, use the following command:</p> <pre><code>    ```bash {name=docker-ps-apache,tag=docker-example}\n    docker ps -a\n    ```\n</code></pre> <p>This will list all Docker containers, including the one you've just started.</p>"},{"location":"guide/examples/docker-example/#stop-and-remove-the-docker-container","title":"Stop and Remove the Docker Container","text":"<p>When you're done, it's a good practice to stop and remove the container to free up resources. The following command stops and removes the container named <code>my-running-app</code>.</p> <pre><code>    ```bash {name=docker-stop-apache,tag=docker-example}\n    CONTAINER_ID=$(docker ps -aqf \"name=my-running-app\")\n    docker stop $CONTAINER_ID &amp;&amp; docker rm $CONTAINER_ID\n    ```\n</code></pre>"},{"location":"guide/examples/docker-example/#full-markdown-file","title":"Full markdown file","text":"<p>interact-with-docker.md</p> <pre><code>    # Interact with Docker\n\n    ## Build the Docker Image\n\n    The following command builds the Docker image using the `Dockerfile.apache` file. The image will be tagged as `my-apache2`.\n\n    ```bash {name=docker-build-apache,tag=docker-example}\n    docker build -t my-apache2 -f Dockerfile.apache .\n    ```\n\n    ## Run the Docker Container\n\n    Once the image is built, you can run it as a container. The following command starts a container in detached mode, names it `my-running-app`, and exposes port `8080` on your local machine to port `80` on the container (the default Apache port).\n\n    ```bash {name=docker-run-apache,tag=docker-example}\n    docker run -dit --name my-running-app -p 8080:80 my-apache2\n    ```\n\n    You can now access the Apache server by navigating to `http://localhost:8080` in your web browser.\n\n    ## List Docker Containers\n\n    To check the running containers, use the following command:\n\n    ```bash {name=docker-ps-apache,tag=docker-example}\n    docker ps -a\n    ```\n\n    This will list all Docker containers, including the one you've just started.\n\n    ## Stop and Remove the Docker Container\n\n    When you're done, it's a good practice to stop and remove the container to free up resources. The following command stops and removes the container named `my-running-app`.\n\n    ```bash {name=docker-stop-apache,tag=docker-example}\n    CONTAINER_ID=$(docker ps -aqf \"name=my-running-app\")\n    docker stop $CONTAINER_ID &amp;&amp; docker rm $CONTAINER_ID\n    ```\n</code></pre>"},{"location":"guide/examples/hello-world/","title":"Hello World with RunMD","text":"<p>Welcome to the RunMD introduction guide! In this document, we'll walk you through how to use RunMD to execute code blocks in different languages from within a Markdown file.</p> <p>To get started with RunMD, you'll need to create a Markdown file containing your code blocks.</p>"},{"location":"guide/examples/hello-world/#create-a-runnable-code-block","title":"Create a runnable code block","text":"<p>A runnable code block is like any other code block in Markdown except it has some extra attributes. </p> <pre><code>    ```&lt;script language&gt; {name=&lt;block name&gt;,tag=&lt;optional tag&gt;}\n    # some stuff...\n</code></pre> <p>The <code>name</code> attribute is mandatory, it allows RunMD to determine if it is a runnable code block.</p> <p>The <code>tag</code> attribute is optional, it allows to run group of code blocks.</p> <p>hello-examples.md</p> <pre><code>    # Hello examples\n\n    Using Bash\n\n    ```bash {name=hello-bash,tag=hello-examples}\n    # run with runmd run hello-bash\n    echo \"Hello from bash!\"\n    ```\n\n    Using Python\n\n    ```python {name=hello-python,tag=hello-examples}\n    # run with runmd run hello-python\n    print(\"Hello from python!\")\n    ```\n\n    Using NodeJS\n\n    ```node {name=hello-node,tag=hello-examples}\n    // run with runmd run hello-node\n    console.log(\"Hello from nodejs!\");\n    ```\n\n    Using Ruby\n\n    ```ruby {name=hello-ruby,tag=hello-examples-2}\n    # run with runmd run hello-ruby\n    puts \"Hello from Ruby!\"\n    ```\n\n    Using Perl\n\n    ```perl {name=hello-perl, tag=hello-examples-2}\n    # run with runmd run hello-perl\n    print \"Hello from Perl!\";\n    ```\n</code></pre>"},{"location":"guide/examples/hello-world/#list-your-code-blocks","title":"List your code blocks","text":"<pre><code>runmd list\n</code></pre> <p>...output...</p> <pre><code>$ runmd list\nNAME                           LANG            FILE                                     TAG            \n-------------------------------------------------------------------------------------------------------\nhello-bash                     bash            hello-examples.md                        hello-examples \nhello-python                   python          hello-examples.md                        hello-examples \nhello-node                     node            hello-examples.md                        hello-examples \nhello-ruby                     ruby            hello-examples.md                        hello-examples-2\nhello-perl                     perl            hello-examples.md                        hello-examples-2\n</code></pre>"},{"location":"guide/examples/hello-world/#show-code-block-in-terminal","title":"Show code block in terminal","text":"<pre><code>runmd show &lt;code block name&gt;\n</code></pre> <pre><code>$ runmd show hello-bash\n\n    | # run with runmd run hello-bash\n    | echo \"Hello from bash!\"\n</code></pre> <p>Note</p> <p>If you have <code>Pygments</code> package installed, the output will appear with syntax highlighting. You can install <code>Pygments</code> with: <pre><code>pip install pygments\n</code></pre></p>"},{"location":"guide/examples/hello-world/#run-code-block-by-name","title":"Run code block by name","text":"<pre><code>runmd run &lt;code block name&gt;\n</code></pre> <pre><code>$ runmd run hello-python\n\n&gt; Running: hello-python (python) hello-examples\nHello from python!\n</code></pre>"},{"location":"guide/examples/hello-world/#run-code-blocks-by-tag","title":"Run code blocks by tag","text":"<pre><code>runmd run -t &lt;tag name&gt;\n</code></pre> <pre><code>$runmd run -t hello-examples-2\n\n&gt; Running: hello-ruby (ruby) hello-examples-2\nHello from Ruby!\n\n&gt; Running: hello-perl (perl) hello-examples-2\nHello from Perl!\n</code></pre>"},{"location":"infos/CHANGELOG/","title":"CHANGELOG","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"infos/CHANGELOG/#0101-2024-09-15","title":"[0.10.1] - 2024-09-15","text":""},{"location":"infos/CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>add rootpath to history to locate the original md file</li> </ul>"},{"location":"infos/CHANGELOG/#0100-2024-09-10","title":"[0.10.0] - 2024-09-10","text":""},{"location":"infos/CHANGELOG/#added","title":"Added","text":"<ul> <li>add shebang detection in code blocks</li> <li>add package upload to PYPI</li> <li>add commands module to create the CLI parser</li> </ul>"},{"location":"infos/CHANGELOG/#removed","title":"Removed","text":"<ul> <li>remove cliargs function from cli module</li> </ul>"},{"location":"infos/CHANGELOG/#090-2024-09-06","title":"[0.9.0] 2024-09-06","text":""},{"location":"infos/CHANGELOG/#added_1","title":"Added","text":"<ul> <li>add run command to CLI shell (experimental)</li> <li>add show command to CLI shell (experimental)</li> <li>add list command to CLI shell (experimental)</li> <li>add input markdown file handling</li> <li>add color to code block displayed with the show command</li> <li>add pygments as a dependency</li> <li>add vault features to encrypt/decrypt markdown files (experimental)</li> <li>add sandbox dockerfiles for alpine and debian</li> </ul>"},{"location":"infos/CHANGELOG/#080-2024-09-02","title":"[0.8.0] 2024-09-02","text":""},{"location":"infos/CHANGELOG/#added_2","title":"Added","text":"<ul> <li>create get_configuration fonction to simplify the load and validate in cli.py</li> <li>add expirimental CLI shell for runmd</li> </ul>"},{"location":"infos/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>change print/return with a FileNotFoundError in copy_config()</li> <li>remove useless variable in copy_config()</li> <li>raise error instead of returining empty list if error reading history file</li> <li>change read_history to load_history for coherence with load_config</li> </ul>"},{"location":"infos/CHANGELOG/#070-2024-08-25","title":"[0.7.0] - 2024-08-25","text":""},{"location":"infos/CHANGELOG/#added_3","title":"Added","text":"<ul> <li>add version in init.py</li> <li>add --version command</li> <li>add compile_pattern function (refactoring parser module)</li> </ul>"},{"location":"infos/CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>add tag flag for the run command instead of @+tagname argument</li> <li>add tag flag for the list command instead of @+tagname argument</li> <li>add status for history (success/fail) and collect history only for the run command</li> <li>migrate from pkg_resources to importlib.resources (python min version 3.7)</li> <li>remove unecessary <code>blocklist</code> argument in <code>process_markdown</code> function</li> </ul>"},{"location":"infos/CHANGELOG/#060-2024-08-19","title":"[0.6.0] - 2024-08-19","text":""},{"location":"infos/CHANGELOG/#added_4","title":"Added","text":"<ul> <li>add hist command to print runmd history command and replay commands</li> </ul>"},{"location":"infos/CHANGELOG/#051-2024-08-19","title":"[0.5.1] - 2024-08-19","text":""},{"location":"infos/CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>huge refactoring of cli.py</li> </ul>"},{"location":"infos/CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>tag option is now working with list command</li> </ul>"},{"location":"infos/CHANGELOG/#050-2024-08-17","title":"[0.5.0] - 2024-08-17","text":""},{"location":"infos/CHANGELOG/#added_5","title":"Added","text":"<ul> <li>add function dedicated to language settings validation</li> </ul>"},{"location":"infos/CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>remove duplicated code in runner.py</li> <li>drop config.json for config.ini</li> </ul>"},{"location":"infos/CHANGELOG/#042-2024-08-16","title":"[0.4.2] - 2024-08-16","text":""},{"location":"infos/CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>fix the print error when using the run command for a block name which does not exist</li> </ul>"},{"location":"infos/CHANGELOG/#041-2024-08-16","title":"[0.4.1] - 2024-08-16","text":""},{"location":"infos/CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>move call to valid_config() from load_config() to cli.py</li> </ul>"},{"location":"infos/CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>fix error related to the --file option</li> </ul>"},{"location":"infos/CHANGELOG/#040-2024-08-13","title":"[0.4.0] - 2024-08-13","text":""},{"location":"infos/CHANGELOG/#added_6","title":"Added","text":"<ul> <li>add <code>tag</code> attribute</li> <li>add the possibility to run all code blocks with a given tag using <code>runmd run @&lt;tag&gt;</code></li> </ul>"},{"location":"infos/CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>rework on runner.py to print STDERR outputs in terminal</li> <li>refactor cli.py for lisibility and control</li> </ul>"},{"location":"infos/CHANGELOG/#030-2024-08-12","title":"[0.3.0] - 2024-08-12","text":""},{"location":"infos/CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>cli and all functions in process.py have been refactored to gain in lisibility and usability</li> </ul>"},{"location":"infos/CHANGELOG/#020-2024-08-11","title":"[0.2.0] - 2024-08-11","text":""},{"location":"infos/CHANGELOG/#added_7","title":"Added","text":"<ul> <li>add support for environment variables</li> <li>add --file option to specifiy the markdown file to process</li> </ul>"},{"location":"infos/CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>change <code>ls</code> command to <code>list</code> for homogeneity</li> </ul>"},{"location":"infos/CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>remove --dir option since it creates too much complexity for very small benefits</li> </ul>"},{"location":"infos/CHANGELOG/#010-2024-08-09","title":"[0.1.0] - 2024-08-09","text":""},{"location":"infos/CHANGELOG/#added_8","title":"Added","text":"<ul> <li>add <code>show</code>option to show the code block in terminal</li> <li>show <code>(&lt;lang&gt;)</code> or <code>(&lt;lang&gt;: not configured)</code> next to the code block name</li> <li>add config file validation</li> <li>add init command and copy_config function to copy the config file to destination</li> </ul>"},{"location":"infos/CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>add type hints to functions</li> <li>move functions related to configuration to config.py</li> <li>move parse_markdown function to parser.py</li> <li>move run_code_block function to runner.py</li> <li>move process_markdown_files function to process.py</li> </ul>"},{"location":"infos/CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>prevent running code block for not configured languages</li> </ul>"},{"location":"infos/LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2024 Damien Pageot</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}